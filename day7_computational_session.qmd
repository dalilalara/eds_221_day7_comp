---
title: "Joins, strings and dates"
format: html
editor: visual
---

```{r}
library(datapasta)
library(dplyr)
library(palmerpenguins)
library(lubridate)
```

# Joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )


sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

## Full Join

```{r}
#nothing gets ommited from data frame when combining data frames
full_join_example <- full_join(animals, sites )
```

## Left Join

```{r}
#takes x data and joins to x that has key value
left_join_example <- left_join(animals, sites)
```

## Inner Join

```{r}
inter_join_example <- inner_join(animals, sites, by = "location")

sites_2 <- sites |>
  rename(loc = location)
  
  
```

Example of joining when key variables have non mathcing names

```{r}
nonmatching <- full_join(animals, sites, by = c("location" = "loc"))
```

# Filter Join

## Semi Join

```{r}
semi_join_example <- semi_join(animals, sites, by = "location" )
```

## Anti Join

Where only observation don't have a match are returned

```{r}
anit_join_example <- anti_join(animals, sites, by = "location")
```

## Data Wrangling Refersher

```{r}
p_df <- penguins |>
  #filter(keeps rows)
  filter(island %in% c("Biscoe", "Dream Island")) |>
  #keep or exclude columns
  select(-sex, -year) |>
  #add column
  mutate(body_mass_kg = body_mass_g / 1000) |>
  #rename new name = old name
  rename(location = island)
```

# Dates & Times with `lubridate`

```{r}
# 1 
#stores as character 
my_date <- "03-15-1998"

#mdy, ymd, dmy

#function transforms format mdy
lubridate::mdy(my_date)

# 2
my_date <- "11/07/2003"
lubridate::dmy(my_date)

# 3 
my_date <- "08-Jun-1974"
lubridate::dmy(my_date)

# 4 
my_date <- "19610518"
my_real_date <- lubridate::ymd(my_date)
# character
class(my_date)
# stored as date
class(my_real_date)
```

```{r}
# 5
lubridate::ymd("1942-08-30")

# 6
lubridate::mdy("09/22/84")

```

```{r}
# 7 time example 
time <- "2020-08-12 11:18"
lubridate::ymd_hm(time)
class(time)
```

```{r}
# convert time zones 
# all time zonesOlsonNames()

with_tz(time, "America/Los_Angeles")

with_tz(time, "America/New_York")

with_tz(time, "Europe/London")

with_tz(time, "Asia/Jakarta")

with_tz(time, "Europe/Rome")
```

```{r}
time <- "2020-08-12 11:18"

my_time <- ydm_hms(time)

year(my_time)
hour(my_time)
second(my_time)
minute(my_time)
```

```{r}
#Tells weekday of the date 
teddy_bday <- lubridate::ymd("20170615")
wday(teddy_bday, label = TRUE)

#bday 
dalila <- lubridate::ymd("20000901")
wday(dalila, label = TRUE)
month(dalila, label = TRUE)

```

### Parsing df ex

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
  )

#change date format and make new columns/rename
urchin_ymd <- urchin_counts |>
  mutate(date = mdy(date)) |>
  mutate(year = year(date),
         month = month(date),
         day = day(date))

class(urchin_ymd$date)
```

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)

#gives the time length in years of the interval years created
time_length(time_interval, "year")
```

# Strings
